/* exported EV3devSim */

function EV3devSim (id) {
  var self = this;

  const WIDTH = 2362;
  const HEIGHT = 1143;

  // Create the canvas and load into provided element
  this.loadCanvas = function(id) {
    self.background = document.createElement('canvas');
    self.foreground = document.createElement('canvas');

    self.background.setAttribute('id', 'background');
    self.foreground.setAttribute('id', 'foreground');

    self.background.width = WIDTH / 2;
    self.background.height = HEIGHT / 2;
    self.foreground.width = WIDTH / 2;
    self.foreground.height = HEIGHT / 2;

    self.background.style.position = 'absolute';
    self.foreground.style.position = 'absolute';
    self.foreground.style.border = 'solid 1px black';

    self.foregroundCtx = self.foreground.getContext('2d');
    foregroundCtx.translate(0, HEIGHT / 2);
    foregroundCtx.scale(0.5, -0.5);

    self.backgroundCtx = self.background.getContext('2d');
    backgroundCtx.translate(0, HEIGHT / 2);
    backgroundCtx.scale(0.5, -0.5);

    document.getElementById(id).appendChild(self.background);
    document.getElementById(id).appendChild(self.foreground);
  };

  // Set the background
  this.setBackground = function() {
    self.backgroundCtx.beginPath();
    self.backgroundCtx.moveTo(WIDTH / 2, 0);
    self.backgroundCtx.lineTo(WIDTH / 2, HEIGHT);
    self.backgroundCtx.moveTo(0, HEIGHT / 2);
    self.backgroundCtx.lineTo(WIDTH, HEIGHT / 2);
    self.backgroundCtx.stroke();

    self.backgroundCtx.moveTo(WIDTH / 2 + 100, 100);
    self.backgroundCtx.lineTo(WIDTH / 2 + 100, HEIGHT - 100);

    self.backgroundCtx.stroke();
  };

  // Create robot on off-screen canvas
  this.loadRobot = function() {
    var robotSpecs = {
      wheeldiameter: 56,
      wheelSpacing: 180,
      sensor1: {
        present: true,
        x: -30,
        y: 30
      },
      sensor2: {
        present: true,
        x: 30,
        y: 30
      }
    };
    const WHEEL_WIDTH = 20;
    const SENSOR_WIDTH = 20;
    const SENSOR_DIAMETER = 15;

    const RIGHT_LIMIT = Math.max(
      robotSpecs.wheelSpacing / 2 + WHEEL_WIDTH / 2,
      robotSpecs.sensor1.x + SENSOR_WIDTH / 2,
      robotSpecs.sensor2.x + SENSOR_WIDTH / 2
    );
    const LEFT_LIMIT = Math.min(
      -robotSpecs.wheelSpacing / 2 - WHEEL_WIDTH / 2,
      robotSpecs.sensor1.x - SENSOR_WIDTH / 2,
      robotSpecs.sensor2.x - SENSOR_WIDTH / 2
    );
    const TOP_LIMIT = Math.max(
      robotSpecs.wheeldiameter / 2,
      robotSpecs.sensor1.y + SENSOR_WIDTH / 2,
      robotSpecs.sensor2.y + SENSOR_WIDTH / 2
    );
    const BOTTOM_LIMIT = Math.min(
      -robotSpecs.wheeldiameter / 2,
      robotSpecs.sensor1.y - SENSOR_WIDTH / 2,
      robotSpecs.sensor2.y - SENSOR_WIDTH / 2
    );

    self.robotCanvas = document.createElement('canvas');
    self.robotCanvas.width = RIGHT_LIMIT - LEFT_LIMIT; // 200
    self.robotCanvas.height = TOP_LIMIT - BOTTOM_LIMIT; // 68
    var ctx = self.robotCanvas.getContext('2d');
    // ctx.translate(-LEFT_LIMIT, TOP_LIMIT);
    ctx.strokeRect(0, 0, self.robotCanvas.width, self.robotCanvas.height);
    ctx.strokeRect(0, 0, self.robotCanvas.width, 8);

    console.log(RIGHT_LIMIT - LEFT_LIMIT);
    console.log(TOP_LIMIT - BOTTOM_LIMIT);
    console.log(-robotSpecs.wheelSpacing / 2 - WHEEL_WIDTH / 2);
    console.log(robotSpecs.wheeldiameter / 2);

    // Draw wheels
    ctx.fillRect(
      -robotSpecs.wheelSpacing / 2 - WHEEL_WIDTH / 2,
      robotSpecs.wheeldiameter / 2,
      WHEEL_WIDTH,
      robotSpecs.wheeldiameter
    );
    ctx.fillRect(
      -10,
      -robotSpecs.wheeldiameter / 2,
      WHEEL_WIDTH,
      robotSpecs.wheeldiameter
    );

    self.foregroundCtx.drawImage(
      self.robotCanvas,
      WIDTH / 2 + LEFT_LIMIT,
      HEIGHT / 2 + BOTTOM_LIMIT);
  };

  self.loadCanvas(id);
  self.setBackground();
  self.loadRobot();
}