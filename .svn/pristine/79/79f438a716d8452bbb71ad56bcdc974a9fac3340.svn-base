import ev3dev2_glue, time

# Needed to prevent loops from locking up the javascript thread
SENSOR_DELAY = 0.01

class ColorSensor:
  _DRIVER_NAME = 'lego-ev3-color'

  COLOR_NOCOLOR = 0
  COLOR_BLACK = 1
  COLOR_BLUE = 2
  COLOR_GREEN = 3
  COLOR_YELLOW = 4
  COLOR_RED = 5
  COLOR_WHITE = 6
  COLOR_BROWN = 7

  COLORS = (
      'NoColor',
      'Black',
      'Blue',
      'Green',
      'Yellow',
      'Red',
      'White',
      'Brown',
    )

  MODE_COL_REFLECT = 'COL-REFLECT'
  MODE_COL_AMBIENT = 'COL-AMBIENT'
  MODE_COL_COLOR = 'COL-COLOR'
  MODE_REF_RAW = 'REF-RAW'
  MODE_RGB_RAW = 'RGB-RAW'

  def __init__(self, address=None):
    self.sensor = ev3dev2_glue.ColorSensor(address)

  @property
  def reflected_light_intensity(self):
    time.sleep(SENSOR_DELAY)
    return int(list(self.sensor.value())[0])

  @property
  def ambient_light_intensity(self):
    return 0

  @property
  def color(self):
    time.sleep(SENSOR_DELAY)
    return 0

  @property
  def color_name(self):
    return self.COLORS[self.color]

  @property
  def raw(self):
    time.sleep(SENSOR_DELAY)
    return list(self.sensor.value())

  @property
  def calibrate_white(self):
    return 0

  @property
  def rgb(self):
    time.sleep(SENSOR_DELAY)
    return list(self.sensor.value())

  @property
  def red(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[0]

  @property
  def green(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[1]

  @property
  def blue(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[2]