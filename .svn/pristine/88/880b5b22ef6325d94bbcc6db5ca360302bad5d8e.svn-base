/* exported EV3devSim */

function EV3devSim (id) {
  var self = this;

  const WIDTH = 2362;
  const HEIGHT = 1143;

  const WHEEL_WIDTH = 20;
  const SENSOR_WIDTH = 30;
  const SENSOR_DIAMETER = 20;

  self.fps = 30;
  self.clock = 0;
  self.timer = null;

  // Create the canvas and load into provided element
  this.loadCanvas = function(id) {
    self.background = document.createElement('canvas');
    self.foreground = document.createElement('canvas');

    self.background.setAttribute('id', 'background');
    self.foreground.setAttribute('id', 'foreground');

    self.background.width = WIDTH;
    self.background.height = HEIGHT;
    self.foreground.width = WIDTH;
    self.foreground.height = HEIGHT;

    self.background.style.position = 'absolute';
    self.foreground.style.position = 'absolute';
    self.background.style.transform = 'scale(0.5)';
    self.foreground.style.transform = 'scale(0.5)';
    self.background.style.transformOrigin = '0 0';
    self.foreground.style.transformOrigin = '0 0';
    self.foreground.style.border = 'solid 1px black';

    self.foregroundCtx = self.foreground.getContext('2d');
    self.foregroundCtx.translate(0, HEIGHT);
    self.foregroundCtx.scale(1, -1);

    self.backgroundCtx = self.background.getContext('2d');

    var parent = document.getElementById(id);
    parent.appendChild(self.background);
    parent.appendChild(self.foreground);
    parent.style.width = WIDTH / 2;
    parent.style.height = HEIGHT / 2;
  };

  // Set the background
  this.loadBackground = function(imgURL) {
    var img = new Image();   // Create new img element
    img.addEventListener('load', function() {
      self.backgroundCtx.drawImage(img, 0, 0);
    }, false);
    img.src = imgURL;
  };

  // Clea the background
  this.clearBackground = function() {
    self.backgroundCtx.clearRect(0, 0, WIDTH, HEIGHT);
  };

  // Create robot on off-screen canvas
  this.loadRobot = function(robotSpecs) {
    // Load default robot specs if not provided
    if (typeof robotSpecs === 'undefined') {
      robotSpecs = {
        wheeldiameter: 56,
        wheelSpacing: 180,
        sensor1: {
          x: -20,
          y: 30
        },
        sensor2: {
          x: 20,
          y: 30
        }
      };
    }
    self.robotSpecs = robotSpecs;

    // Initialize robot states
    self.robotStates = {
      x: WIDTH / 2,
      y: HEIGHT / 2,
      angle: 0,
      leftWheel: {
        pos: 0,
        speed: 0
      },
      rightWheel: {
        pos: 0,
        speed: 0
      },
      sensor1: [0,0,0],
      sensor2: [0,0,0]
    };

    var RIGHT_LIMIT = robotSpecs.wheelSpacing / 2 + WHEEL_WIDTH / 2;
    var LEFT_LIMIT = -robotSpecs.wheelSpacing / 2 - WHEEL_WIDTH / 2;
    var TOP_LIMIT = robotSpecs.wheeldiameter / 2;
    var BOTTOM_LIMIT = -robotSpecs.wheeldiameter / 2;

    if (typeof robotSpecs.sensor1 !== 'undefined') {
      RIGHT_LIMIT = Math.max(RIGHT_LIMIT, robotSpecs.sensor1.x + SENSOR_WIDTH / 2);
      LEFT_LIMIT = Math.min(LEFT_LIMIT, robotSpecs.sensor1.x - SENSOR_WIDTH / 2);
      TOP_LIMIT = Math.max(TOP_LIMIT, robotSpecs.sensor1.y + SENSOR_WIDTH / 2);
      BOTTOM_LIMIT = Math.min(BOTTOM_LIMIT, robotSpecs.sensor1.y - SENSOR_WIDTH / 2);
    }
    if (typeof robotSpecs.sensor2 !== 'undefined') {
      RIGHT_LIMIT = Math.max(RIGHT_LIMIT, robotSpecs.sensor2.x + SENSOR_WIDTH / 2);
      LEFT_LIMIT = Math.min(LEFT_LIMIT, robotSpecs.sensor2.x - SENSOR_WIDTH / 2);
      TOP_LIMIT = Math.max(TOP_LIMIT, robotSpecs.sensor2.y + SENSOR_WIDTH / 2);
      BOTTOM_LIMIT = Math.min(BOTTOM_LIMIT, robotSpecs.sensor2.y - SENSOR_WIDTH / 2);
    }

    self.robotSpecs.width = RIGHT_LIMIT - LEFT_LIMIT;
    self.robotSpecs.height = TOP_LIMIT - BOTTOM_LIMIT;

    self.robotCanvas = document.createElement('canvas');
    self.robotCanvas.width = self.robotSpecs.width;
    self.robotCanvas.height = self.robotSpecs.height;
    var ctx = self.robotCanvas.getContext('2d');

    // Robot Body
    ctx.fillStyle = 'orange';
    ctx.fillRect(0, 0, self.robotCanvas.width, self.robotCanvas.height); // bounding box

    // Find origin
    self.ROBOT_X_CENTER = -LEFT_LIMIT;
    self.ROBOT_Y_CENTER = -BOTTOM_LIMIT;

    // Draw wheels
    ctx.fillStyle = 'black';
    ctx.fillRect(
      self.ROBOT_X_CENTER - (robotSpecs.wheelSpacing / 2) - (WHEEL_WIDTH / 2),
      self.ROBOT_Y_CENTER - (robotSpecs.wheeldiameter / 2),
      WHEEL_WIDTH,
      robotSpecs.wheeldiameter
    );
    ctx.fillRect(
      self.ROBOT_X_CENTER + (robotSpecs.wheelSpacing / 2) - (WHEEL_WIDTH / 2),
      self.ROBOT_Y_CENTER - (robotSpecs.wheeldiameter / 2),
      WHEEL_WIDTH,
      robotSpecs.wheeldiameter
    );

    // Draw sensors
    ctx.fillStyle = 'gray';
    ctx.fillRect(
      self.ROBOT_X_CENTER + robotSpecs.sensor1.x - (SENSOR_WIDTH / 2),
      self.ROBOT_Y_CENTER + robotSpecs.sensor1.y - (SENSOR_WIDTH / 2),
      SENSOR_WIDTH,
      SENSOR_WIDTH
    );
    ctx.fillRect(
      self.ROBOT_X_CENTER + robotSpecs.sensor2.x - (SENSOR_WIDTH / 2),
      self.ROBOT_Y_CENTER + robotSpecs.sensor2.y - (SENSOR_WIDTH / 2),
      SENSOR_WIDTH,
      SENSOR_WIDTH
    );

    ctx.fillStyle = 'white';
    ctx.beginPath();
    ctx.arc(
      self.ROBOT_X_CENTER + robotSpecs.sensor1.x,
      self.ROBOT_Y_CENTER + robotSpecs.sensor1.y,
      SENSOR_DIAMETER / 2,
      0, 2 * Math.PI
    );
    ctx.fill();
    ctx.stroke();

    ctx.beginPath();
    ctx.arc(
      self.ROBOT_X_CENTER + robotSpecs.sensor2.x,
      self.ROBOT_Y_CENTER + robotSpecs.sensor2.y,
      SENSOR_DIAMETER / 2,
      0, 2 * Math.PI
    );
    ctx.fill();
    ctx.stroke();
  };

  this.setRobotPos = function(x, y, angle) {
    self.robotStates.x = x;
    self.robotStates.y = y;
    self.robotStates.angle = angle;
  };

  this.setRobotSpeed = function(leftWheelSpeed, rightWheelSpeed) {
    self.robotStates.leftWheel.speed = leftWheelSpeed;
    self.robotStates.rightWheel.speed = rightWheelSpeed;
  };

  this.animate = function() {
    self.clock++;
    var period = 1 / self.fps;
    var left_dist = (self.robotStates.leftWheel.speed / 360) * (self.robotSpecs.wheeldiameter * Math.PI) * period;
    var right_dist = (self.robotStates.rightWheel.speed / 360) * (self.robotSpecs.wheeldiameter * Math.PI) * period;

    var delta_x = (left_dist + right_dist) / 2 * Math.cos(self.robotStates.angle);
    var delta_y = (left_dist + right_dist) / 2 * Math.sin(self.robotStates.angle);
    var delta_angle = (right_dist - left_dist) / self.robotSpecs.wheelSpacing;

    self.robotStates.x += delta_x;
    self.robotStates.y += delta_y;
    self.robotStates.angle += delta_angle;
    if (self.robotStates.angle > Math.PI * 2) {
      self.robotStates.angle -= Math.PI * 2;
    }

    self.drawRobot();
  };

  this.startAnimation = function() {
    self.clock = 0;
    self.timer = setInterval(self.animate, 1000 / self.fps);
  };

  this.stopAnimation = function() {
    clearInterval(self.timer);
    self.timer = null;
  };

  this.drawRobot = function() {
    self.foregroundCtx.clearRect(0, 0, WIDTH, HEIGHT);
    self.foregroundCtx.save();
    self.foregroundCtx.translate(self.robotStates.x, self.robotStates.y);
    self.foregroundCtx.rotate(self.robotStates.angle - Math.PI / 2);
    self.foregroundCtx.drawImage(
      self.robotCanvas,
      -self.ROBOT_X_CENTER,
      -self.ROBOT_Y_CENTER
    );
    self.foregroundCtx.restore();
    self.getSensorsValues();
  };

  this.getSensorsValues = function() {
    var cos = Math.cos(self.robotStates.angle - Math.PI / 2);
    var sin = Math.sin(self.robotStates.angle - Math.PI / 2);

    var x1 = cos * self.robotSpecs.sensor1.x - sin * self.robotSpecs.sensor1.y + self.robotStates.x;
    var y1 = -(sin * self.robotSpecs.sensor1.x + cos * self.robotSpecs.sensor1.y) + (HEIGHT - self.robotStates.y);

    var x2 = cos * self.robotSpecs.sensor2.x - sin * self.robotSpecs.sensor2.y + self.robotStates.x;
    var y2 = -(sin * self.robotSpecs.sensor2.x + cos * self.robotSpecs.sensor2.y) + (HEIGHT - self.robotStates.y);

    self.robotStates.sensor1 = self.getSensorValues(x1, y1);
    self.robotStates.sensor2 = self.getSensorValues(x2, y2);
  };

  this.getSensorValues = function(x, y) {
    var sensorBox = self.backgroundCtx.getImageData(
      x - SENSOR_DIAMETER / 2,
      y - SENSOR_DIAMETER / 2,
      SENSOR_DIAMETER,
      SENSOR_DIAMETER
    );

    var redTotal = 0;
    var greenTotal = 0;
    var blueTotal = 0;
    var count = 0;
    var radiusSquare = (SENSOR_DIAMETER / 2) ** 2;
    for (let row = 0; row < SENSOR_DIAMETER; row++) {
      for (let col = 0; col < SENSOR_DIAMETER; col++) {
        if ((row**2 + col**2) < radiusSquare) {
          let offset = row * (SENSOR_DIAMETER * 4) + col * 4;
          count++;
          redTotal += sensorBox.data[offset];
          greenTotal += sensorBox.data[offset + 1];
          blueTotal += sensorBox.data[offset + 2];
        }
      }
    }

    return [redTotal / count, greenTotal / count, blueTotal / count];
  };

  self.loadCanvas(id);
  self.loadRobot();
  self.drawRobot();
}