import ev3dev2_glue, time

# Needed to prevent loops from locking up the javascript thread
SENSOR_DELAY = 0.01

class ColorSensor:
  _DRIVER_NAME = 'lego-ev3-color'

  COLOR_NOCOLOR = 0 # HSV values from https://lego.fandom.com/wiki/Colour_Palette
  COLOR_BLACK = 1   # 0, 0, 0
  COLOR_BLUE = 2    # 207, 64, 78
  COLOR_GREEN = 3   # 120, 100, 60
  COLOR_YELLOW = 4  # 60, 100, 100
  COLOR_RED = 5     # 0, 100, 100
  COLOR_WHITE = 6   # 0, 0, 100
  COLOR_BROWN = 7   # 24, 79, 25

  COLORS = (
      'NoColor',
      'Black',
      'Blue',
      'Green',
      'Yellow',
      'Red',
      'White',
      'Brown',
    )

  MODE_COL_REFLECT = 'COL-REFLECT'
  MODE_COL_AMBIENT = 'COL-AMBIENT'
  MODE_COL_COLOR = 'COL-COLOR'
  MODE_REF_RAW = 'REF-RAW'
  MODE_RGB_RAW = 'RGB-RAW'

  def __init__(self, address=None):
    self.sensor = ev3dev2_glue.ColorSensor(address)

  @property
  def reflected_light_intensity(self):
    time.sleep(SENSOR_DELAY)
    return int(list(self.sensor.value())[0])

  @property
  def ambient_light_intensity(self):
    return 0

  @property
  def color(self):
    time.sleep(SENSOR_DELAY)
    hsv = self.hsv

    if hsv[2] < 30:
      return 1

    elif abs(hsv[0] - 207) < 20 and hsv[1] > 50 and hsv[2] > 50:
      return 2

    elif abs(hsv[0] - 120) < 20 and hsv[1] > 50 and hsv[2] > 50:
      return 3

    elif abs(hsv[0] - 60) < 20 and hsv[1] > 50 and hsv[2] > 50:
      return 4

    elif (hsv[0] < 20 or hsv[0] > 340) and hsv[1] > 50 and hsv[2] > 50:
      return 5

    elif hsv[1] < 20 and hsv[2] > 80:
      return 6

    elif abs(hsv[0] - 24) < 20 and hsv[1] > 50 and hsv[2] < 50:
      return 7

    else:
      return 0

  @property
  def color_name(self):
    return self.COLORS[self.color]

  @property
  def raw(self):
    time.sleep(SENSOR_DELAY)
    return list(self.sensor.value())

  @property
  def calibrate_white(self):
    return 0

  @property
  def rgb(self):
    time.sleep(SENSOR_DELAY)
    rgb = list(self.sensor.value())
    for i in range(3):
      rgb[i] = int(rgb[i])
    return rgb

  @property
  def lab(self):
    time.sleep(SENSOR_DELAY)
    lab = list(self.sensor.valueLAB())
    for i in range(3):
      lab[i] = int(lab[i])
    return lab

  @property
  def hsv(self):
    time.sleep(SENSOR_DELAY)
    hsv = list(self.sensor.valueHSV())
    for i in range(3):
      hsv[i] = int(hsv[i])
    return hsv

  @property
  def hls(self):
    time.sleep(SENSOR_DELAY)
    hls = list(self.sensor.valueHLS())
    for i in range(3):
      hls[i] = int(hls[i])
    return hls

  @property
  def red(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[0]

  @property
  def green(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[1]

  @property
  def blue(self):
    time.sleep(SENSOR_DELAY)
    return self.sensor.value()[2]